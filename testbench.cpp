#include "verilated.h"
#include "VSimTop.h" // Generated by Verilator from SimTop.v
#include <iostream>

namespace OP {
    const int ADD    = 0x0;
    const int ADC    = 0x1;
    const int SUB    = 0x2;
    const int SBB    = 0x3;
    const int CMP    = 0x4;
    const int INC    = 0x5;
    const int DEC    = 0x6;
    const int AND    = 0x7;
    const int NAND   = 0x8;
    const int OR     = 0x9;
    const int NOR    = 0xA;
    const int XOR    = 0xB;
    const int LSH    = 0xC;
    const int RSH    = 0xD;
    const int RFU    = 0xE;
    const int NOP    = 0xF;
};

int main(int argc, char** argv) {
    Verilated::commandArgs(argc, argv);
    VSimTop* top = new VSimTop; // Instantiate the top module

    printf("\n\n");

    // Reset the ALU
    top->i_clk = 0;
    top->i_reset = 1;
    top->eval();
    top->i_clk = 1;
    top->eval();
    top->i_clk = 0;
    top->i_reset = 0;
    top->eval();

    // Test 1: ADD (5 + 3 = 8)
    std::cout << "Test 1: ADD (5 + 3)\n";
    top->i_wordA = 5;
    top->i_wordB = 3;
    top->i_opcode = OP::ADD; // OPCODE_ADD
    top->i_clk = 1;
    top->eval();
    top->i_clk = 0;
    top->eval();
    std::cout << "Result: " << (int)top->o_result << " Flags: " << (int)top->o_flags << "\n";
    assert(top->o_result == 8 && "ADD failed");

    // Test 2: SUB (10 - 7 = 3)
    std::cout << "Test 2: SUB (10 - 7)\n";
    top->i_wordA = 10;
    top->i_wordB = 7;
    top->i_opcode = 0x2; // OPCODE_SUB
    top->i_clk = 1;
    top->eval();
    top->i_clk = 0;
    top->eval();
    std::cout << "Result: " << (int)top->o_result << " Flags: " << (int)top->o_flags << "\n";
    assert(top->o_result == 3 && "SUB failed");

    // Test 3: CMP (5 vs 5)
    std::cout << "Test 3: CMP (5 vs 5)\n";
    top->i_wordA = 5;
    top->i_wordB = 5;
    top->i_opcode = 0x4; // OPCODE_CMP
    top->i_clk = 1;
    top->eval();
    top->i_clk = 0;
    top->eval();
    std::cout << "Result: " << (int)top->o_result << " Flags: " << (int)top->o_flags << "\n";
    assert((top->o_flags & 0x08) && "CMP equal flag not set"); // Check FLAG_EQ (bit 3)

    // Cleanup
    delete top;
    std::cout << "All tests passed!\n";
    return 0;
}